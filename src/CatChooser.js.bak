import React, { Component } from 'react';
import Select from '@material-ui/core/Select';
import Input from '@material-ui/core/Input';
import FormControl from '@material-ui/core/FormControl';
import InputLabel from '@material-ui/core/InputLabel';
import MenuItem from '@material-ui/core/MenuItem';
import Chip from '@material-ui/core/Chip';
import category_picker from './category_picker.json';

const jeopardy_round = category_picker.jeopardy_round;
const double_jeopardy_round = category_picker.double_jeopardy_round;
const final_jeopardy_round = category_picker.final_jeopardy_round;


class CatChooser extends Component {
    constructor(props) {
        super(props);
        this.state={
            categories:[],
        };
    }

    handleChange(event) {
        this.setState({
          categories: event.target.value,
        });
    }

    renderSelect(round) {
        return (
            <FormControl>
                <InputLabel>Chip</InputLabel>
                <Select
                multiple
                value={this.state.categories}
                onChange={(event) => this.handleChange(event)}
                input={<Input />}
                renderValue={(selected) => (
                    <div>
                    {selected.map((value) => (
                        <Chip key={value} label={value} />
                    ))}
                    </div>
                )}
                >
                {round.categories.map((cat) => (
                    <MenuItem key={cat.name} value={cat.id}>
                    {cat.name.toUpperCase()} - show {cat.show_number} - aired {cat.airdate}
                    </MenuItem>
                ))}
                </Select>
            </FormControl>
        );
      }

    render() { 
        return (
            <div className="picker">
                {this.renderSelect(jeopardy_round)}
                {this.renderSelect(double_jeopardy_round)}
                {this.renderSelect(final_jeopardy_round)}
            </div>
          );
    }
}
export default CatChooser;