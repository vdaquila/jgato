{"version":3,"sources":["CatSelector.js","CatChooser.js","Clue2.js","GameBoard.js","Game.js","App.js","index.js"],"names":["CatSelector","props","handleChange","bind","state","selectedOption","this","setState","onSelectorChange","roundName","maxChoices","cats","roundTitle","dangerClass","isValid","Form","Group","Label","htmlFor","className","parseInt","value","onChange","options","map","cat","id","label","name","toUpperCase","show_number","airdate","isMulti","classNamePrefix","filterOption","createFilter","ignoreAccents","closeMenuOnSelect","Component","CatChooser","handleCategorySelection","error","isLoaded","rounds","formValid","jcid","djcid","fjcid","validSelectors","formSubmitted","fetch","then","res","json","result","selectedOptions","prevState","length","Alert","variant","renderAlert","noValidate","validated","onSubmit","event","preventDefault","stopPropagation","passBackSelections","jeopardy_round","categories","double_jeopardy_round","final_jeopardy_round","Button","type","title","src","width","height","frameBorder","allowFullScreen","href","Clue","view","completed","activeClueClicked","activeClueChild","clickHandler","transitionEndHandler","setTimeout","flipping","getActiveClue","clue","toString","isDailyDouble","propertyName","answer","showDD","isDD","daily_double","isFinal","showAnswers","ReactHtmlParser","response","replace","dailyDouble","displayDDClue","style","transform","left","top","WebkitTransform","front","catName","currActiveClue","onClick","onTransitionEnd","PureComponent","GameBoard","sizeDownWidth","sizeDownHeight","windowWidth","windowForSizing","innerWidth","windowHeight","innerHeight","addEventListener","handleResize","removeEventListener","gameOver","roundHeaders","rows","cols","cardWidth","cardHeight","clues","headers","boardRound","forEach","category","categoryIndex","push","key","question","questionIndex","activeClue","renderHostHeader","renderThanksForPlaying","Game","getSelectedCategories","handleRefreshRound","handleDailyDouble","checkDailyDouble","game","gameGenerated","newWindow","window","activeRound","nextRoundLabel","inDailyDouble","clueId","jcidQS","val","join","djcidQS","fjcidQS","process","close","nextRLabel","nextRound","isFinalJ","features","center","onOpen","newWin","onUnload","console","log","renderCatChooser","renderGameBoard","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bcadedcd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport WindowedSelect, {createFilter} from 'react-windowed-select';\n\n\nclass CatSelector extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.state={\n            selectedOption: null,\n        };\n    }\n\n    handleChange(selectedOption) {\n        this.setState({selectedOption});\n        this.props.onSelectorChange(this.props.roundName, selectedOption, this.props.maxChoices);\n        //console.log(`Option selected for ${this.props.roundName}`, selectedOption);\n    };\n\n\n    render() { \n        const { selectedOption } = this.state;\n        const cats = this.props.cats;\n        const roundName = this.props.roundName;\n        const roundTitle = this.props.roundTitle;\n        const maxChoices = this.props.maxChoices;\n        const dangerClass = (this.props.isValid ? \"\" : \" text-danger\");\n\n        return (\n            <Form.Group>\n                <Form.Label htmlFor={roundName} className={\"h3\" + dangerClass}>{roundTitle}</Form.Label>\n                <small className={\"form-text\" + dangerClass}>Choose {maxChoices} {parseInt(maxChoices) === 1 ? 'category' : 'categories'}.</small>\n                <WindowedSelect\n                    value={selectedOption}\n                    onChange={this.handleChange}\n                    options={cats.map(cat => ({value:`${cat.id}`,label:`${cat.name.toUpperCase()} - show ${cat.show_number} - aired ${cat.airdate}`}))}\n                    name={roundName}\n                    isMulti={true}\n                    className=\"basic-multi-select\"\n                    classNamePrefix=\"select\"\n                    filterOption={createFilter({ignoreAccents: false})}\n                    closeMenuOnSelect={roundName === \"fjcid\" ? true : false}\n                />\n            </Form.Group>\n          );\n    }\n}\nexport default CatSelector;","import React, { Component } from 'react';\nimport CatSelector from './CatSelector';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\n//import category_picker from './category_picker'\n\nclass CatChooser extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleCategorySelection = this.handleCategorySelection.bind(this);\n        this.state={\n            error: null,\n            isLoaded: false,\n            rounds:{},\n            formValid:false,\n            jcid: [],\n            djcid: [],\n            fjcid: [],\n            validSelectors: {\n                jcid:true,\n                djcid:true,\n                fjcid:true,\n            },\n            formSubmitted:false,\n        };\n    }\n\n    /*componentDidMount(){\n        this.setState({\n            isLoaded:true,\n            rounds:category_picker,\n        })\n    }*/\n\n\n    componentDidMount() {\n        fetch(process.env.REACT_APP_JGATO_API+\"/api/cat_picker/\")\n            .then(res => res.json())\n            .then(\n            (result) => {\n                this.setState({\n                isLoaded: true,\n                rounds:result\n                });\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                isLoaded: true,\n                error\n                });\n            }\n        )\n    }\n\n    handleCategorySelection(roundName,selectedOptions,maxChoices) {\n        if (selectedOptions === null) {\n            selectedOptions = [];\n        }\n        this.setState({[roundName]:selectedOptions});\n        \n        if (this.state.formSubmitted){\n            this.setState(prevState => ({\n                validSelectors: {\n                ...prevState.validSelectors, \n                [roundName]: selectedOptions.length === parseInt(maxChoices)\n                }\n            }))\n        }\n        //console.log(`Option selected:`, selectedOptions);\n    }\n\n    renderAlert() {\n        if (this.state.formSubmitted === true) {\n            if (this.state.formValid === true) {\n                return <Alert variant=\"success\">Game generated!</Alert>\n            }\n            else {\n                return <Alert variant=\"danger\">Please correct the errors highlighted below.</Alert>\n            }\n        }\n        else return;\n    }\n\n    render() { \n\n        const handleSubmit = (event) => {\n            \n            event.preventDefault();\n            event.stopPropagation();\n\n            this.setState({validSelectors: {\n                jcid: (this.state.jcid.length === 5), \n                djcid: (this.state.djcid.length === 5),\n                fjcid: (this.state.fjcid.length === 1)}}, function(){\n                    this.setState({formSubmitted:true});\n                    if (this.state.validSelectors.jcid === true && this.state.validSelectors.djcid === true && this.state.validSelectors.fjcid === true) {                \n                        this.setState({formValid:true});\n                        this.props.passBackSelections(\n                            this.state.jcid.map(cat => (cat.value)),\n                            this.state.djcid.map(cat => (cat.value)),\n                            this.state.fjcid.map(cat => (cat.value)),);\n                        }                    \n                });\n        };\n\n        if (this.state.isLoaded === true) {\n            const rounds = this.state.rounds;\n            return (\n                <>\n                <header>\n                    <div className=\"nameplate\">\n                        This... is...<br />\n                        <span className=\"jeopardy-logo\">Jeopardy!</span>\n                    </div>\n                </header>\n                <div className=\"container\">\n                    {this.renderAlert()}\n                    <Form noValidate validated={this.state.formValid} onSubmit={handleSubmit} className=\"mb-5 bg-light p-3\">\n                        <CatSelector cats={rounds.jeopardy_round.categories} roundName=\"jcid\" roundTitle=\"Jeopardy\" maxChoices=\"5\" onSelectorChange={this.handleCategorySelection} isValid={this.state.validSelectors.jcid} />\n                        <CatSelector cats={rounds.double_jeopardy_round.categories} roundName=\"djcid\" roundTitle=\"Double Jeopardy\" maxChoices=\"5\" onSelectorChange={this.handleCategorySelection} isValid={this.state.validSelectors.djcid} />\n                        <CatSelector cats={rounds.final_jeopardy_round.categories} roundName=\"fjcid\" roundTitle=\"Final Jeopardy\" maxChoices=\"1\" onSelectorChange={this.handleCategorySelection} isValid={this.state.validSelectors.fjcid} />\n                        <Button type=\"submit\">Generate Game</Button>\n                    </Form>\n                </div>\n                </>\n            );\n        }\n        else {\n            return (\n                <>\n                <header>\n                    <div className=\"nameplate\">\n                        This... is...<br />\n                        <span className=\"jeopardy-logo\">Jeopardy!</span>\n                    </div>\n                </header>\n                <div className=\"loading\">\n                    <iframe title=\"loading\" src=\"https://giphy.com/embed/fLstPMMZA2upKXScA1\" width=\"480\" height=\"480\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/jeopardy--alex-trebek-fLstPMMZA2upKXScA1\">via GIPHY</a></p>\n                </div>\n                </>\n            );\n        }\n    }\n}\nexport default CatChooser;","import React, { PureComponent } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\n\nclass Clue extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            view: 'points', \n            completed: false,\n            activeClueClicked: false,\n            activeClueChild: false\n        };\n        this.clickHandler=this.clickHandler.bind(this);\n        this.transitionEndHandler=this.transitionEndHandler.bind(this);\n    }\n\n    clickHandler(event) {\n        if (this.state.view === 'points') {\n            setTimeout(() => {\n                if (this.state.view === \"question\") {\n                }\n            }, 1800);\n            this.setState({view: 'question', flipping: true, activeClueClicked:true});\n            this.props.getActiveClue(this.props.clue.id.toString());\n        } else {\n            this.setState({view: 'points', completed: true, flipping: true, activeClueClicked:false});\n            this.props.getActiveClue('');\n            this.props.isDailyDouble(false);\n        }\n    }\n\n    transitionEndHandler(event) {\n        if (event.propertyName === 'width') {\n            this.setState({flipping: false});\n        }\n    }\n\n    render() {\n        \n        let answer;\n        let showDD = false;\n        let isDD = this.props.clue.daily_double;\n        let isFinal = this.props.isFinal;\n        \n        if (this.state.activeClueChild || this.state.activeClueClicked) {\n            //console.log('checking ' + this.props.clue.id.toString() + 'to see if it is a DD');\n            this.props.isDailyDouble(isDD);\n        }\n\n        if (this.props.showAnswers) {\n            answer = <div className=\"answer\">{ReactHtmlParser(this.props.clue.response.toString().replace(\"\\\\'\",\"'\"))}</div>\n            if (isDD) {\n                showDD =  true;\n            }\n        }\n\n        let displayDDClue = this.props.displayDDClue;\n        let dailyDouble;\n        if (isDD && !displayDDClue) {\n            \n            dailyDouble = <div className=\"dd-overlay\"></div>\n        }\n        \n        let style = {\n                width: this.props.width + 'px',\n                height: this.props.height + 'px',\n                transform: 'translate3d(' + this.props.left + 'px,' + this.props.top + 'px,0)',\n                WebkitTransform: 'translate3d(' + this.props.left + 'px,' + this.props.top + 'px,0)'\n            },\n            front = this.state.completed ? '' : <><div className=\"dollar-amount\">{`$${this.props.clue.value}`}</div>{showDD ? <div className=\"dd\">DD</div> : ''}</>,\n            className = 'flipper';\n        \n        if (isFinal) {\n            front = <div className=\"cat-title\">{this.props.catName}</div>\n        }\n\n        if (this.state.view !== 'points') {\n            className = className + ' flipped';\n        }\n        if (this.state.flipping) {\n            className = className + ' flipping';\n        }\n\n        //console.log('rendering clue ' + this.props.clue.id);\n        if (this.props.currActiveClue === this.props.clue.id.toString() && this.state.view === 'points' && this.state.activeClueClicked === false ) {\n            setTimeout(() => {\n                if (this.state.view === \"question\") {\n                }\n            }, 1800);\n            this.setState({view: 'question', flipping: true, activeClueChild:true});\n            //console.log('flipped other q');\n        }\n        else if (this.props.currActiveClue !== this.props.clue.id.toString() && this.state.view === 'question' && this.state.activeClueChild === true){\n            this.props.isDailyDouble(false);\n            this.setState({view: 'points', completed: true, flipping: true, activeClueChild:false});  \n        }\n\n        return (\n            <div style={style} className={className} onClick={this.clickHandler} onTransitionEnd={this.transitionEndHandler}>\n                <div className={'clue' + (isFinal ? ' final-clue' : '')}>\n                    <div className='front'>\n                        {front}\n                    </div>\n                    <div className='back'>\n                        {dailyDouble}\n                        <div className={\"cat-title\" + (isFinal ? ' d-none' : '')}>{this.props.catName}</div>\n                        <div className=\"clue-text\">\n                            {ReactHtmlParser(this.props.clue.clue.toString().replace(\"\\\\'\",\"'\"))}                             \n                        </div>                                 \n                        {answer}                        \n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n};\n\nexport default Clue;","import React, { Component } from 'react';\nimport Clue from './Clue2';\n\nclass GameBoard extends Component {\n    \n    constructor(props) {\n        super(props);\n        let sizeDownWidth = 1;\n        let sizeDownHeight = 1;\n        if (this.props.showAnswers === true) {\n            sizeDownWidth = .5;\n            sizeDownHeight = .7;\n        }\n        this.state={\n            windowWidth: (this.props.windowForSizing.innerWidth*sizeDownWidth),\n            windowHeight: (this.props.windowForSizing.innerHeight*sizeDownHeight),\n        };\n    } \n\n    handleResize(event) {\n        let sizeDownWidth = 1;\n        let sizeDownHeight = 1;\n        if (this.props.showAnswers === true) {\n            sizeDownWidth = .5;\n            sizeDownHeight = .7;\n        }\n        this.setState({\n            windowWidth: (this.props.windowForSizing.innerWidth*sizeDownWidth),\n            windowHeight: (this.props.windowForSizing.innerHeight*sizeDownHeight),\n        });\n    }\n\n    componentDidMount() {\n        this.props.windowForSizing.addEventListener('resize', this.handleResize.bind(this));\n    }\n\n    componentWillUnmount() {\n        this.props.windowForSizing.removeEventListener('resize', this.handleResize);\n        //console.log('unmounting gameboard');\n    }\n\n    renderThanksForPlaying() {\n        return (\n            <>\n            <header>\n                <div className=\"nameplate\">\n                    Thanks for playing<br />\n                    <span className=\"jeopardy-logo\">Jeopardy!</span>\n                </div>\n            </header>\n            <div className=\"loading\">\n                <iframe title=\"loading\" src=\"https://giphy.com/embed/fLstPMMZA2upKXScA1\" width=\"480\" height=\"480\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/jeopardy--alex-trebek-fLstPMMZA2upKXScA1\">via GIPHY</a></p>\n            </div>\n            </>\n        )\n    }\n\n    renderHostHeader(){\n        if (this.props.showAnswers) {\n            return (\n                <>\n                    <header>\n                        <div className=\"nameplate\">\n                            Host controls for<br />\n                            <span className=\"jeopardy-logo\">Jeopardy!</span>\n                        </div>\n                    </header>\n                </>\n            )\n        }\n        else return;\n    }\n\n    render() { \n\n        if (this.props.gameOver === false) {\n\n            const isFinal = this.props.isFinal;\n            const showAnswers = this.props.showAnswers;\n            const rows = isFinal ? 1 : 6;\n            const cols = isFinal ? 1 : 5;\n            let cardWidth = this.state.windowWidth / cols,\n            cardHeight = this.state.windowHeight / rows,\n            clues = [],\n            headers = []\n\n            this.props.boardRound.categories.forEach((category, categoryIndex) => {\n                let left = categoryIndex * cardWidth;\n                headers.push(\n                    <div className=\"header\" key={category.id} style={{width:cardWidth + 'px',height:cardHeight + 'px'}}><div className=\"cat-name\">{category.name}</div></div>\n                );\n                category.clues.forEach((question, questionIndex) => {\n                    let top = (questionIndex * cardHeight) + cardHeight;\n                    if (isFinal) {\n                        top = top - cardHeight;\n                    }\n                    clues.push(\n                        <Clue \n                            key={question.id} \n                            catName={category.name} \n                            showAnswers={showAnswers} \n                            clue={question} \n                            left={left} \n                            top={top} \n                            height={cardHeight} \n                            width={cardWidth} \n                            getActiveClue={this.props.getActiveClue} \n                            currActiveClue={this.props.activeClue} \n                            displayDDClue={this.props.displayDDClue} \n                            isDailyDouble={this.props.isDailyDouble} \n                            isFinal={isFinal} />\n                    )\n                })\n            });\n\n            let roundHeaders;\n            \n            if (!isFinal) {\n                roundHeaders = <div className=\"headers\">{headers}</div>;\n            }\n\n            return (\n                <>\n                 {this.renderHostHeader()}\n                <div className={`board${showAnswers?' host': ''}`}>\n                    {roundHeaders}\n                    {clues}\n                </div>\n                </>\n            );\n        }\n        else {\n            return (\n                <>\n                {this.renderThanksForPlaying()}\n                </>\n            );\n        }\n    }\n}\nexport default GameBoard;","import React, { Component } from 'react';\nimport CatChooser from './CatChooser';\nimport GameBoard from './GameBoard';\nimport NewWindow from 'react-new-window';\nimport Button from 'react-bootstrap/Button';\n\nclass Game extends Component {\n\n    constructor(props) {\n        super(props);\n        this.getSelectedCategories=this.getSelectedCategories.bind(this);\n        this.getActiveClue=this.getActiveClue.bind(this);\n        this.handleRefreshRound=this.handleRefreshRound.bind(this);\n        this.handleDailyDouble=this.handleDailyDouble.bind(this);\n        this.checkDailyDouble=this.checkDailyDouble.bind(this);\n        this.state={\n            game:{},\n            gameGenerated:false,\n            newWindow:window,\n            activeClue:'',\n            activeRound:{},\n            nextRoundLabel:'Double Jeopardy',\n            gameOver:false,\n            inDailyDouble:false,\n            displayDDClue:false,\n            isFinal: false,\n        };\n    }\n\n    getActiveClue(clueId){\n        //console.log('setting active clue id', clueId);\n        this.setState({activeClue:clueId});\n    }\n\n\n    getSelectedCategories(jcid,djcid,fjcid){\n        let jcidQS = jcid.map(val => (\"jcid=\" + val)).join('&');\n        let djcidQS = djcid.map(val => (\"djcid=\" + val)).join('&');\n        let fjcidQS = fjcid.map(val => (\"fjcid=\" + val)).join('&');\n        fetch(`${process.env.REACT_APP_JGATO_API}/api/play/?${jcidQS}&${djcidQS}&${fjcidQS}`)\n            .then(res => res.json())\n            .then(\n            (result) => {\n                this.setState({\n                game:result,\n                gameGenerated:true,\n                activeRound:result.jeopardy_round,\n                });\n                //console.log(result.jeopardy_round);\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                error\n                });\n            }\n        )\n    }\n\n    componentWillUnmount(){\n        //console.log('game unloading');\n        if (this.state.newWindow !== window) {\n            this.state.newWindow.close();\n        }\n    }\n\n    handleRefreshRound(){\n\n        if (this.state.gameOver === true) {\n            this.setState({\n                game:{},\n                gameGenerated:false,\n                newWindow:window,\n                activeClue:'',\n                activeRound:{},\n                nextRoundLabel:'Double Jeopardy',\n                gameOver:false,\n                inDailyDouble:false,\n                displayDDClue:false,\n                isFinal:false,\n            })\n        }\n        else {\n            let nextRLabel, nextRound;\n            let isFinalJ = false;\n            if (this.state.nextRoundLabel !== 'End Game') {\n\n                if (this.state.nextRoundLabel === 'Double Jeopardy') {\n                    nextRLabel = 'Final Jeopardy';\n                    nextRound = this.state.game.double_jeopardy_round;\n                }\n                else if (this.state.nextRoundLabel === 'Final Jeopardy') {\n                    nextRLabel = 'End Game';\n                    nextRound = this.state.game.final_jeopardy_round;\n                    isFinalJ = true;\n                }\n                this.setState({\n                    nextRoundLabel: nextRLabel,\n                    activeRound: nextRound,\n                    isFinal:isFinalJ,\n                });\n            }   \n            else {\n                nextRLabel = 'Start New Game';\n                this.setState({\n                    gameOver:true, \n                    nextRoundLabel: nextRLabel,});\n            }\n        }\n    }\n\n    handleDailyDouble(){\n        this.setState({\n            displayDDClue:true,\n        })\n\n    }\n\n    checkDailyDouble(isDD){\n        if (isDD) {\n            this.setState({\n                inDailyDouble:true,\n            })\n        }\n        else {\n            this.setState({\n                displayDDClue:false,\n                inDailyDouble:false,\n            })\n        }\n    }\n\n    renderGameBoard(){\n        if (this.state.gameGenerated === true) {\n            return (\n                <>                \n                <div className=\"mx-5 my-3\">\n                    <GameBoard \n                        boardRound={this.state.activeRound} \n                        showAnswers={true} \n                        windowForSizing={window} \n                        getActiveClue={this.getActiveClue} \n                        activeClue={this.state.activeClue} \n                        gameOver={this.state.gameOver} \n                        displayDDClue={this.state.displayDDClue} \n                        isDailyDouble={this.checkDailyDouble} \n                        isFinal={this.state.isFinal} />                 \n                   \n                    <div className={\"host-controls\" + (this.state.gameOver ? ' game-over' : '')}>\n                        <Button onClick={this.handleRefreshRound} className=\"btn btn-primary btn-lg btn-block\">{this.state.nextRoundLabel}</Button>\n                        <Button onClick={this.handleDailyDouble} className={'btn btn-danger btn-lg btn-block' + (!this.state.inDailyDouble || this.state.displayDDClue ? ' d-none' : '')}>Reveal Daily Double Clue</Button>\n                    </div>\n                \n                </div>\n                \n                <NewWindow \n                    features={{width:\"1200\", height:\"800\"}} \n                    title=\"The Game!\" \n                    center=\"screen\" \n                    onOpen={(newWin) => (this.setState({newWindow:newWin}))} \n                    onUnload={() => {console.log('unloading window');}}>\n                    \n                    <GameBoard \n                        boardRound={this.state.activeRound} \n                        showAnswers={false} \n                        windowForSizing={this.state.newWindow} \n                        getActiveClue={this.getActiveClue} \n                        activeClue={this.state.activeClue} \n                        gameOver={this.state.gameOver} \n                        displayDDClue={this.state.displayDDClue} \n                        isDailyDouble={this.checkDailyDouble}\n                        isFinal={this.state.isFinal} />        \n                </NewWindow>\n                </>\n            )\n        }  \n        else {\n            return;\n        }\n    }\n\n    renderCatChooser(){\n        if (this.state.gameGenerated === false) {\n            return (\n                <CatChooser passBackSelections={this.getSelectedCategories} />\n            );\n        }\n        else return;\n    }\n\n    render() {\n        return (\n            <>            \n            {this.renderCatChooser()}      \n            {this.renderGameBoard()}       \n            </>\n        )\n    }\n}\nexport default Game;","import React, { Component } from 'react';\nimport Game from './Game';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}