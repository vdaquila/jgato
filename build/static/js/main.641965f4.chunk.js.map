{"version":3,"sources":["CatSelector.js","CatChooser.js","GameBoard.js","Game.js","App.js","index.js"],"names":["CatSelector","props","handleChange","bind","state","selectedOption","this","setState","onSelectorChange","roundName","maxChoices","cats","roundTitle","dangerClass","isValid","Form","Group","Label","htmlFor","className","parseInt","value","onChange","options","map","cat","id","label","name","toUpperCase","show_number","airdate","isMulti","classNamePrefix","filterOption","createFilter","ignoreAccents","closeMenuOnSelect","Component","CatChooser","handleCategorySelection","error","isLoaded","rounds","formValid","jcid","djcid","fjcid","validSelectors","formSubmitted","fetch","then","res","json","result","selectedOptions","prevState","length","Alert","variant","renderAlert","noValidate","validated","onSubmit","event","preventDefault","stopPropagation","passBackSelections","jeopardy_round","categories","double_jeopardy_round","final_jeopardy_round","Button","type","class","title","src","width","height","frameBorder","allowFullScreen","href","GameBoard","jcidQS","selectedCategories","val","join","djcidQS","fjcidQS","i","round","currentCategory","console","log","ReactHtmlParser","clues","clue","toString","replace","response","showAnswers","x","answer","push","final_answer","renderCategoryBoard","Game","getSelectedCategories","catSelections","gameGenerated","features","renderCatChooser","renderGameBoard","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.641965f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport WindowedSelect, {createFilter} from 'react-windowed-select';\n\n\nclass CatSelector extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.state={\n            selectedOption: null,\n        };\n    }\n\n    handleChange(selectedOption) {\n        this.setState({selectedOption});\n        this.props.onSelectorChange(this.props.roundName, selectedOption, this.props.maxChoices);\n        //console.log(`Option selected for ${this.props.roundName}`, selectedOption);\n    };\n\n\n    render() { \n        const { selectedOption } = this.state;\n        const cats = this.props.cats;\n        const roundName = this.props.roundName;\n        const roundTitle = this.props.roundTitle;\n        const maxChoices = this.props.maxChoices;\n        const dangerClass = (this.props.isValid ? \"\" : \" text-danger\");\n\n        return (\n            <Form.Group>\n                <Form.Label htmlFor={roundName} className={\"h3\" + dangerClass}>{roundTitle}</Form.Label>\n                <small className={\"form-text\" + dangerClass}>Choose {maxChoices} {parseInt(maxChoices) === 1 ? 'category' : 'categories'}.</small>\n                <WindowedSelect\n                    value={selectedOption}\n                    onChange={this.handleChange}\n                    options={cats.map(cat => ({value:`${cat.id}`,label:`${cat.name.toUpperCase()} - show ${cat.show_number} - aired ${cat.airdate}`}))}\n                    name={roundName}\n                    isMulti={true}\n                    className=\"basic-multi-select\"\n                    classNamePrefix=\"select\"\n                    filterOption={createFilter({ignoreAccents: false})}\n                    closeMenuOnSelect={roundName === \"fjcid\" ? true : false}\n                />\n            </Form.Group>\n          );\n    }\n}\nexport default CatSelector;","import React, { Component } from 'react';\nimport CatSelector from './CatSelector';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\n//import category_picker from './category_picker'\n\nclass CatChooser extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleCategorySelection = this.handleCategorySelection.bind(this);\n        this.state={\n            error: null,\n            isLoaded: false,\n            rounds:{},\n            formValid:false,\n            jcid: [],\n            djcid: [],\n            fjcid: [],\n            validSelectors: {\n                jcid:true,\n                djcid:true,\n                fjcid:true,\n            },\n            formSubmitted:false,\n        };\n    }\n\n    /*componentDidMount(){\n        this.setState({\n            isLoaded:true,\n            rounds:category_picker,\n        })\n    }*/\n\n\n    componentDidMount() {\n        fetch(\"https://192.168.2.217:8443/api/cat_picker/\")\n            .then(res => res.json())\n            .then(\n            (result) => {\n                this.setState({\n                isLoaded: true,\n                rounds:result\n                });\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                isLoaded: true,\n                error\n                });\n            }\n        )\n    }\n\n    handleCategorySelection(roundName,selectedOptions,maxChoices) {\n        if (selectedOptions === null) {\n            selectedOptions = [];\n        }\n        this.setState({[roundName]:selectedOptions});\n        \n        if (this.state.formSubmitted){\n            this.setState(prevState => ({\n                validSelectors: {\n                ...prevState.validSelectors, \n                [roundName]: selectedOptions.length === parseInt(maxChoices)\n                }\n            }))\n        }\n        //console.log(`Option selected:`, selectedOptions);\n    }\n\n    renderAlert() {\n        if (this.state.formSubmitted === true) {\n            if (this.state.formValid === true) {\n                return <Alert variant=\"success\">Game generated!</Alert>\n            }\n            else {\n                return <Alert variant=\"danger\">Please correct the errors highlighted below.</Alert>\n            }\n        }\n        else return;\n    }\n\n    render() { \n\n        const handleSubmit = (event) => {\n            \n            event.preventDefault();\n            event.stopPropagation();\n\n            this.setState({validSelectors: {\n                jcid: (this.state.jcid.length === 5), \n                djcid: (this.state.djcid.length === 5),\n                fjcid: (this.state.fjcid.length === 1)}}, function(){\n                    this.setState({formSubmitted:true});\n                    if (this.state.validSelectors.jcid === true && this.state.validSelectors.djcid === true && this.state.validSelectors.fjcid === true) {                \n                        this.setState({formValid:true});\n                        this.props.passBackSelections(\n                            this.state.jcid.map(cat => (cat.value)),\n                            this.state.djcid.map(cat => (cat.value)),\n                            this.state.fjcid.map(cat => (cat.value)),);\n                        }                    \n                });\n        };\n\n        if (this.state.isLoaded === true) {\n            const rounds = this.state.rounds;\n            return (\n                <>\n                {this.renderAlert()}\n                <Form noValidate validated={this.state.formValid} onSubmit={handleSubmit} className=\"mb-5 bg-light p-3\">\n                    <CatSelector cats={rounds.jeopardy_round.categories} roundName=\"jcid\" roundTitle=\"Jeopardy\" maxChoices=\"5\" onSelectorChange={this.handleCategorySelection} isValid={this.state.validSelectors.jcid} />\n                    <CatSelector cats={rounds.double_jeopardy_round.categories} roundName=\"djcid\" roundTitle=\"Double Jeopardy\" maxChoices=\"5\" onSelectorChange={this.handleCategorySelection} isValid={this.state.validSelectors.djcid} />\n                    <CatSelector cats={rounds.final_jeopardy_round.categories} roundName=\"fjcid\" roundTitle=\"Final Jeopardy\" maxChoices=\"1\" onSelectorChange={this.handleCategorySelection} isValid={this.state.validSelectors.fjcid} />\n                    <Button type=\"submit\">Generate Game</Button>\n                </Form>\n                </>\n            );\n        }\n        else {\n            return (\n                <div class=\"loading\">\n                    <iframe title=\"loading\" src=\"https://giphy.com/embed/fLstPMMZA2upKXScA1\" width=\"480\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/jeopardy--alex-trebek-fLstPMMZA2upKXScA1\">via GIPHY</a></p>\n                </div>\n            );\n        }\n    }\n}\nexport default CatChooser;","import React, { Component } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\n\n\nclass GameBoard extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state={\n            error: null,\n            isLoaded: false,\n            rounds:{},\n        };\n    }\n\n    componentDidMount() {\n        let jcidQS = this.props.selectedCategories.jcid.map(val => (\"jcid=\" + val)).join('&');\n        let djcidQS = this.props.selectedCategories.djcid.map(val => (\"djcid=\" + val)).join('&');\n        let fjcidQS = this.props.selectedCategories.fjcid.map(val => (\"fjcid=\" + val)).join('&');\n        fetch(`https://192.168.2.217:8443/api/play/?${jcidQS}&${djcidQS}&${fjcidQS}`)\n            .then(res => res.json())\n            .then(\n            (result) => {\n                this.setState({\n                isLoaded: true,\n                rounds:result\n                });\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                isLoaded: true,\n                error\n                });\n            }\n        )\n    }\n\n    /*componentDidMount(){\n        this.setState({\n            isLoaded:true,\n            rounds:game_board,\n        });\n        console.log('component mounted');\n    }*/\n    \n    renderCategoryAnswers(i, round) {\n        const currentCategory = round.categories[i];\n        console.log(round, currentCategory);\n        \n        return (\n            <>\n                <h4>{currentCategory.name.toUpperCase()}</h4>\n                <ol>\n                    <li><strong>Clue:</strong> {ReactHtmlParser(currentCategory.clues[0].clue.toString().replace(\"\\\\'\",\"'\"))}<br />\n                    <strong>Response:</strong> {ReactHtmlParser(currentCategory.clues[0].response.toString().replace(\"\\\\'\",\"'\"))}</li>\n                    <li><strong>Clue:</strong> {ReactHtmlParser(currentCategory.clues[1].clue.toString().replace(\"\\\\'\",\"'\"))}<br />\n                    <strong>Response:</strong> {ReactHtmlParser(currentCategory.clues[1].response.toString().replace(\"\\\\'\",\"'\"))}</li>\n                    <li><strong>Clue:</strong> {ReactHtmlParser(currentCategory.clues[2].clue.toString().replace(\"\\\\'\",\"'\"))}<br />\n                    <strong>Response:</strong> {ReactHtmlParser(currentCategory.clues[2].response.toString().replace(\"\\\\'\",\"'\"))}</li>\n                    <li><strong>Clue:</strong> {ReactHtmlParser(currentCategory.clues[3].clue.toString().replace(\"\\\\'\",\"'\"))}<br />\n                    <strong>Response:</strong> {ReactHtmlParser(currentCategory.clues[3].response.toString().replace(\"\\\\'\",\"'\"))}</li>\n                    <li><strong>Clue:</strong> {ReactHtmlParser(currentCategory.clues[4].clue.toString().replace(\"\\\\'\",\"'\"))}<br />\n                    <strong>Response:</strong> {ReactHtmlParser(currentCategory.clues[4].response.toString().replace(\"\\\\'\",\"'\"))}</li>\n                </ol>\n            </>\n        );\n    }\n\n    renderCategoryBoard(i,round) {\n        const currentCategory = round.categories[i];\n        const showAnswers = this.props.showAnswers;\n\n        let clues = [];\n\n        for (let x=0; x<5; x++) {\n            let answer;\n            if (showAnswers) {\n                answer = <div className=\"answer\">{`Response: ${ReactHtmlParser(currentCategory.clues[x].response.toString().replace(\"\\\\'\",\"'\"))}`}</div>\n            }\n            clues.push(\n                <>\n                    <div className=\"clue\">\n                        <div className=\"dollar-amount\">{`$${currentCategory.clues[x].value}`}</div>\n                        <div className=\"clue-text\">\n                            {ReactHtmlParser(currentCategory.clues[x].clue.toString().replace(\"\\\\'\",\"'\"))}                             \n                        </div>                                 \n                        {answer}\n                    </div>\n                </>\n            )\n        }\n        \n        return (\n            <div className=\"col\">\n                <div className=\"category-title\">{currentCategory.name.toUpperCase()}</div>\n                {clues}\n            </div>\n        );\n    }\n\n    render() { \n        if (this.state.isLoaded === true) {\n            const showAnswers = this.props.showAnswers;\n            let final_answer;\n            if (showAnswers) {\n                final_answer = <div className=\"answer\">{`Response: ${ReactHtmlParser(this.state.rounds.final_jeopardy_round.categories[0].clues[0].response.toString().replace(\"\\\\'\",\"'\"))}`}</div>\n            }\n            return (\n                <>\n                    <h3>Jeopardy</h3>\n                    <div className=\"row mb-5 bg-light p-3\">                        \n                        {this.renderCategoryBoard(0, this.state.rounds.jeopardy_round)}\n                        {this.renderCategoryBoard(1, this.state.rounds.jeopardy_round)}\n                        {this.renderCategoryBoard(2, this.state.rounds.jeopardy_round)}\n                        {this.renderCategoryBoard(3, this.state.rounds.jeopardy_round)}\n                        {this.renderCategoryBoard(4, this.state.rounds.jeopardy_round)}\n                    </div>\n                    <h3>Double Jeopardy</h3>\n                    <div className=\"row mb-5 bg-light p-3\">\n                        {this.renderCategoryBoard(0, this.state.rounds.double_jeopardy_round)}\n                        {this.renderCategoryBoard(1, this.state.rounds.double_jeopardy_round)}\n                        {this.renderCategoryBoard(2, this.state.rounds.double_jeopardy_round)}\n                        {this.renderCategoryBoard(3, this.state.rounds.double_jeopardy_round)}\n                        {this.renderCategoryBoard(4, this.state.rounds.double_jeopardy_round)}\n                    </div>\n                    <h3>Final Jeopardy</h3>\n                    <div className=\"row mb-5 bg-light p-3\">\n                        <div className=\"col-12\">\n                            <div className=\"category-title\">{this.state.rounds.final_jeopardy_round.categories[0].name.toUpperCase()}</div>\n                            <div className=\"clue-text\">\n                                {ReactHtmlParser(this.state.rounds.final_jeopardy_round.categories[0].clues[0].clue.toString().replace(\"\\\\'\",\"'\"))}\n                            </div>\n                            {final_answer}                        \n                        </div>\n                    </div>\n                </>\n            );\n        }\n        else {\n            return (\n                <div class=\"loading\">\n                    <iframe title=\"loading\" src=\"https://giphy.com/embed/fLstPMMZA2upKXScA1\" width=\"480\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/jeopardy--alex-trebek-fLstPMMZA2upKXScA1\">via GIPHY</a></p>\n                </div>\n            );\n        }\n\n    }\n}\nexport default GameBoard;","import React, { Component } from 'react';\nimport CatChooser from './CatChooser';\nimport GameBoard from './GameBoard';\nimport NewWindow from 'react-new-window'\n\nclass Game extends Component {\n\n    constructor(props) {\n        super(props);\n        this.getSelectedCategories=this.getSelectedCategories.bind(this)\n        this.state={\n            catSelections:{},\n            gameGenerated:false,\n        };\n    }\n\n    getSelectedCategories(jcid,djcid,fjcid){\n        this.setState({catSelections: {jcid, djcid, fjcid}});\n        this.setState({gameGenerated:true});\n    }\n\n    renderGameBoard(){\n        if (this.state.gameGenerated === true) {\n            return (\n                <>\n                <GameBoard selectedCategories={this.state.catSelections} showAnswers={true} /> \n                <NewWindow features={{width:\"600\"}}>\n                    <GameBoard selectedCategories={this.state.catSelections} showAnswers={false} />\n                </NewWindow>\n                </>\n            )\n        }\n        else {\n            return;\n        }\n    }\n\n    renderCatChooser(){\n        if (this.state.gameGenerated === false) {\n            return (\n                <CatChooser passBackSelections={this.getSelectedCategories} />\n            );\n        }\n        else return;\n    }\n\n    render() {\n        return (\n            <div className=\"container game-wrapper\"> \n                <header>\n                    <div className=\"nameplate\">\n                        This... is...<br />\n                        <span className=\"jeopardy-logo\">Jeopardy!</span>\n                    </div>\n                </header>\n                {this.renderCatChooser()}      \n                {this.renderGameBoard()}       \n           </div>\n        );\n    }\n}\nexport default Game;","import React, { Component } from 'react';\nimport Game from './Game';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}