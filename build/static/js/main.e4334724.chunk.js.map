{"version":3,"sources":["CatSelector.js","CatChooser.js","Clue2.js","GameBoard.js","Game.js","App.js","index.js"],"names":["CatSelector","props","handleChange","bind","state","selectedOption","this","setState","onSelectorChange","roundName","maxChoices","cats","roundTitle","dangerClass","isValid","Form","Group","Label","htmlFor","className","parseInt","value","onChange","options","map","cat","id","label","name","toUpperCase","show_number","airdate","isMulti","classNamePrefix","filterOption","createFilter","ignoreAccents","closeMenuOnSelect","Component","CatChooser","handleCategorySelection","error","isLoaded","rounds","formValid","jcid","djcid","fjcid","validSelectors","formSubmitted","fetch","then","res","json","result","selectedOptions","prevState","length","Alert","variant","renderAlert","noValidate","validated","onSubmit","event","preventDefault","stopPropagation","passBackSelections","jeopardy_round","categories","double_jeopardy_round","final_jeopardy_round","Button","type","title","src","width","height","frameBorder","allowFullScreen","href","Clue","view","completed","setTimeout","flipping","propertyName","answer","showAnswers","ReactHtmlParser","clue","response","toString","replace","style","transform","left","top","WebkitTransform","front","onClick","clickHandler","onTransitionEnd","transitionEndHandler","GameBoard","activeClue","windowWidth","window","innerWidth","windowHeight","innerHeight","addEventListener","handleResize","rows","cols","removeEventListener","cardWidth","cardHeight","clues","headers","generatedGame","forEach","category","categoryIndex","push","question","questionIndex","console","log","Game","getSelectedCategories","game","gameGenerated","jcidQS","val","join","djcidQS","fjcidQS","features","renderCatChooser","renderGameBoard","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4334724.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport WindowedSelect, {createFilter} from 'react-windowed-select';\n\n\nclass CatSelector extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.state={\n            selectedOption: null,\n        };\n    }\n\n    handleChange(selectedOption) {\n        this.setState({selectedOption});\n        this.props.onSelectorChange(this.props.roundName, selectedOption, this.props.maxChoices);\n        //console.log(`Option selected for ${this.props.roundName}`, selectedOption);\n    };\n\n\n    render() { \n        const { selectedOption } = this.state;\n        const cats = this.props.cats;\n        const roundName = this.props.roundName;\n        const roundTitle = this.props.roundTitle;\n        const maxChoices = this.props.maxChoices;\n        const dangerClass = (this.props.isValid ? \"\" : \" text-danger\");\n\n        return (\n            <Form.Group>\n                <Form.Label htmlFor={roundName} className={\"h3\" + dangerClass}>{roundTitle}</Form.Label>\n                <small className={\"form-text\" + dangerClass}>Choose {maxChoices} {parseInt(maxChoices) === 1 ? 'category' : 'categories'}.</small>\n                <WindowedSelect\n                    value={selectedOption}\n                    onChange={this.handleChange}\n                    options={cats.map(cat => ({value:`${cat.id}`,label:`${cat.name.toUpperCase()} - show ${cat.show_number} - aired ${cat.airdate}`}))}\n                    name={roundName}\n                    isMulti={true}\n                    className=\"basic-multi-select\"\n                    classNamePrefix=\"select\"\n                    filterOption={createFilter({ignoreAccents: false})}\n                    closeMenuOnSelect={roundName === \"fjcid\" ? true : false}\n                />\n            </Form.Group>\n          );\n    }\n}\nexport default CatSelector;","import React, { Component } from 'react';\nimport CatSelector from './CatSelector';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\n//import category_picker from './category_picker'\n\nclass CatChooser extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleCategorySelection = this.handleCategorySelection.bind(this);\n        this.state={\n            error: null,\n            isLoaded: false,\n            rounds:{},\n            formValid:false,\n            jcid: [],\n            djcid: [],\n            fjcid: [],\n            validSelectors: {\n                jcid:true,\n                djcid:true,\n                fjcid:true,\n            },\n            formSubmitted:false,\n        };\n    }\n\n    /*componentDidMount(){\n        this.setState({\n            isLoaded:true,\n            rounds:category_picker,\n        })\n    }*/\n\n\n    componentDidMount() {\n        fetch(\"https://192.168.2.217:8443/api/cat_picker/\")\n            .then(res => res.json())\n            .then(\n            (result) => {\n                this.setState({\n                isLoaded: true,\n                rounds:result\n                });\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                isLoaded: true,\n                error\n                });\n            }\n        )\n    }\n\n    handleCategorySelection(roundName,selectedOptions,maxChoices) {\n        if (selectedOptions === null) {\n            selectedOptions = [];\n        }\n        this.setState({[roundName]:selectedOptions});\n        \n        if (this.state.formSubmitted){\n            this.setState(prevState => ({\n                validSelectors: {\n                ...prevState.validSelectors, \n                [roundName]: selectedOptions.length === parseInt(maxChoices)\n                }\n            }))\n        }\n        //console.log(`Option selected:`, selectedOptions);\n    }\n\n    renderAlert() {\n        if (this.state.formSubmitted === true) {\n            if (this.state.formValid === true) {\n                return <Alert variant=\"success\">Game generated!</Alert>\n            }\n            else {\n                return <Alert variant=\"danger\">Please correct the errors highlighted below.</Alert>\n            }\n        }\n        else return;\n    }\n\n    render() { \n\n        const handleSubmit = (event) => {\n            \n            event.preventDefault();\n            event.stopPropagation();\n\n            this.setState({validSelectors: {\n                jcid: (this.state.jcid.length === 5), \n                djcid: (this.state.djcid.length === 5),\n                fjcid: (this.state.fjcid.length === 1)}}, function(){\n                    this.setState({formSubmitted:true});\n                    if (this.state.validSelectors.jcid === true && this.state.validSelectors.djcid === true && this.state.validSelectors.fjcid === true) {                \n                        this.setState({formValid:true});\n                        this.props.passBackSelections(\n                            this.state.jcid.map(cat => (cat.value)),\n                            this.state.djcid.map(cat => (cat.value)),\n                            this.state.fjcid.map(cat => (cat.value)),);\n                        }                    \n                });\n        };\n\n        if (this.state.isLoaded === true) {\n            const rounds = this.state.rounds;\n            return (\n                <>\n                <header>\n                    <div className=\"nameplate\">\n                        This... is...<br />\n                        <span className=\"jeopardy-logo\">Jeopardy!</span>\n                    </div>\n                </header>\n                {this.renderAlert()}\n                <Form noValidate validated={this.state.formValid} onSubmit={handleSubmit} className=\"mb-5 bg-light p-3\">\n                    <CatSelector cats={rounds.jeopardy_round.categories} roundName=\"jcid\" roundTitle=\"Jeopardy\" maxChoices=\"5\" onSelectorChange={this.handleCategorySelection} isValid={this.state.validSelectors.jcid} />\n                    <CatSelector cats={rounds.double_jeopardy_round.categories} roundName=\"djcid\" roundTitle=\"Double Jeopardy\" maxChoices=\"5\" onSelectorChange={this.handleCategorySelection} isValid={this.state.validSelectors.djcid} />\n                    <CatSelector cats={rounds.final_jeopardy_round.categories} roundName=\"fjcid\" roundTitle=\"Final Jeopardy\" maxChoices=\"1\" onSelectorChange={this.handleCategorySelection} isValid={this.state.validSelectors.fjcid} />\n                    <Button type=\"submit\">Generate Game</Button>\n                </Form>\n                </>\n            );\n        }\n        else {\n            return (\n                <>\n                <header>\n                    <div className=\"nameplate\">\n                        This... is...<br />\n                        <span className=\"jeopardy-logo\">Jeopardy!</span>\n                    </div>\n                </header>\n                <div className=\"loading\">\n                    <iframe title=\"loading\" src=\"https://giphy.com/embed/fLstPMMZA2upKXScA1\" width=\"480\" height=\"480\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/jeopardy--alex-trebek-fLstPMMZA2upKXScA1\">via GIPHY</a></p>\n                </div>\n                </>\n            );\n        }\n    }\n}\nexport default CatChooser;","import React, { Component } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\n\nclass Clue extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {view: 'points', completed: false};\n    }\n\n    clickHandler(event) {\n        if (this.state.view === 'points') {\n            setTimeout(() => {\n                if (this.state.view === \"question\") {\n                }\n            }, 1800);\n            this.setState({view: 'question', flipping: true});\n        } else {\n            this.setState({view: 'points', completed: true, flipping: true});\n        }\n    }\n\n    transitionEndHandler(event) {\n        if (event.propertyName === 'width') {\n            this.setState({flipping: false});\n        }\n    }\n\n    render() {\n        let answer;\n            if (this.props.showAnswers) {\n                answer = <div className=\"answer\">{ReactHtmlParser(this.props.clue.response.toString().replace(\"\\\\'\",\"'\"))}</div>\n            }\n        let style = {\n                width: this.props.width + 'px',\n                height: this.props.height + 'px',\n                transform: 'translate3d(' + this.props.left + 'px,' + this.props.top + 'px,0)',\n                WebkitTransform: 'translate3d(' + this.props.left + 'px,' + this.props.top + 'px,0)'\n            },\n            front = this.state.completed ? '' : <div className=\"dollar-amount\">{`$${this.props.clue.value}`}</div>,\n            className = 'flipper';\n\n        if (this.state.view !== 'points') {\n            className = className + ' flipped';\n        }\n        if (this.state.flipping) {\n            className = className + ' flipping';\n        }\n        return (\n            <div style={style} className={className} onClick={this.clickHandler.bind(this)} onTransitionEnd={this.transitionEndHandler.bind(this)}>\n                <div className='clue'>\n                    <div className='front'>\n                        {front}\n                    </div>\n                    <div className='back'>\n                        <div className=\"clue-text\">\n                        {ReactHtmlParser(this.props.clue.clue.toString().replace(\"\\\\'\",\"'\"))}                             \n                        </div>                                 \n                        {answer}                        \n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n};\n\nexport default Clue;","import React, { Component } from 'react';\nimport Clue from './Clue2';\n\n\nclass GameBoard extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state={\n            activeClue:'',\n            windowWidth: window.innerWidth,\n            windowHeight: window.innerHeight,\n        };\n    } \n\n    handleResize(event) {\n        this.setState({\n            windowWidth: window.innerWidth,\n            windowHeight: window.innerHeight\n        });\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.handleResize.bind(this));\n        this.setState({rows: 5, cols: 5});\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    render() { \n        const showAnswers = this.props.showAnswers;\n        let cardWidth = this.state.windowWidth / this.state.cols,\n        cardHeight = this.state.windowHeight / (this.state.rows+1),\n        clues = [],\n        headers = []\n\n        this.props.generatedGame.jeopardy_round.categories.forEach((category, categoryIndex) => {\n            let left = categoryIndex * cardWidth;\n            headers.push(\n                <div className=\"header\" style={{width:cardWidth + 'px',height:cardHeight + 'px'}}>{category.name}</div>\n            );\n            category.clues.forEach((question, questionIndex) => {\n                clues.push(\n                    <Clue id={question.id} showAnswers={showAnswers} clue={question} left={left} top={(questionIndex * cardHeight) + cardHeight} height={cardHeight} width={cardWidth} />\n                 )\n            })\n            console.log(\"category: \" + category.name + \" \" + category.id + \" \" + categoryIndex + \"showAnswers: \" + showAnswers.toString());\n        });\n        return (\n            <div className=\"board\">\n                <div className=\"headers\">\n                    {headers}\n                </div>\n                {clues}\n            </div>\n        );\n    }\n}\nexport default GameBoard;","import React, { Component } from 'react';\nimport CatChooser from './CatChooser';\nimport GameBoard from './GameBoard';\nimport NewWindow from 'react-new-window'\n\nclass Game extends Component {\n\n    constructor(props) {\n        super(props);\n        this.getSelectedCategories=this.getSelectedCategories.bind(this)\n        this.state={\n            game:{},\n            gameGenerated:false,\n        };\n    }\n\n    getSelectedCategories(jcid,djcid,fjcid){\n        let jcidQS = jcid.map(val => (\"jcid=\" + val)).join('&');\n        let djcidQS = djcid.map(val => (\"djcid=\" + val)).join('&');\n        let fjcidQS = fjcid.map(val => (\"fjcid=\" + val)).join('&');\n        fetch(`https://192.168.2.217:8443/api/play/?${jcidQS}&${djcidQS}&${fjcidQS}`)\n            .then(res => res.json())\n            .then(\n            (result) => {\n                this.setState({\n                game:result,\n                gameGenerated:true,\n                });\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                error\n                });\n            }\n        )\n    }\n\n    renderGameBoard(){\n        if (this.state.gameGenerated === true) {\n            return (\n                <>\n                <GameBoard generatedGame={this.state.game} showAnswers={true} /> \n                <NewWindow features={{width:\"1200\", height:\"800\"}} name=\"GameBoard\">\n                    <GameBoard generatedGame={this.state.game} showAnswers={false} />                    \n                </NewWindow>\n                </>\n            )\n        }\n        else {\n            return;\n        }\n    }\n\n    renderCatChooser(){\n        if (this.state.gameGenerated === false) {\n            return (\n                <CatChooser passBackSelections={this.getSelectedCategories} />\n            );\n        }\n        else return;\n    }\n\n    render() {\n        return (\n            <>            \n            {this.renderCatChooser()}      \n            {this.renderGameBoard()}       \n            </>\n        )\n    }\n}\nexport default Game;","import React, { Component } from 'react';\nimport Game from './Game';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}